@page "/{id}"
@using System.Text;
@inject IGrupoService grupoService

@if (GruposBusca == null)
{
    <p>Carregando...</p>
}
else
{

    <nav class="navbar navbar-light bg-light" style="margin-bottom:8px; display:block; width: 100%" id="navbar">
        <form class="container-fluid">
            <div class="input-group">
                <span class="input-group-text" id="basic-addon1"> <RadzenIcon Icon="search"/>  </span>
                @*<input type="text" class="form-control" placeholder="O que deseja pedir?" aria-label="Username" aria-describedby="basic-addon1" id="txt_consulta" @bind="textoBusca"
                    oninput="@buscarItem()">*@
                <input type="text" class="form-control" @bind-value="textoBusca" @bind-value:event="oninput" placeholder="O que deseja pedir?" />
            </div>
        </form>
     </nav>
    @foreach (var g in GruposBusca)
    {
        <RadzenPanel AllowCollapse="true" Collapsed="@string.IsNullOrEmpty(@textoBusca)" class="rz-mx-6 rz-mb-4">
            <HeaderTemplate>
                <RadzenRow>
                    <div class="col col-2">
                        <RadzenIcon Icon="facebook"/>
                    </div>
                    <div class="col col-10">
                        <h2 class="m-0 d-flex align-items-center">
                            <b>@g.Ds_grupo.Trim()</b>
                        </h2>
                    </div>
                </RadzenRow>
            </HeaderTemplate>
            <ChildContent>   
            <div class="row row-cols-1 row-cols-sm-3 row-cols-md-3 border" >
                @foreach(var prod in g.Produtos)
                {
                        <div class="col" style="margin-bottom: 1rem; margin-top: 1rem">
                        <RadzenCard id="@g.Cd_grupo">
                            <div class="row row-cols-auto">
                                <div class="col">
                                    <RadzenImage Path="icon-192.png" Class="rounded-circle float-start me-3" Style="width: 80px; height: 80px;" />
                                </div>
                                <div class="col">
                                    <h6 class="mb-0" id="ds_prod">@prod.Ds_produto</h6>
                                    <div style="font-size: .8em">@prod.Composicao</div>
                                </div>
                            </div>
                            <hr style="border: none; background-color: rgba(0,0,0,.08); height: 1px; margin: 1rem 0;" />
                            <RadzenRow>
                                <RadzenBadge BadgeStyle="BadgeStyle.Secondary" Text=@($"{String.Format(new System.Globalization.CultureInfo("pt-BR"), "{0:C}", prod.PrecoVenda)}") />                                
                            </RadzenRow>
                        </RadzenCard>
                    </div>
                }
            </div>

            </ChildContent>
            <SummaryTemplate>
                <RadzenCard class="mt-3">
                    <b>@g.Produtos.Count() Produtos</b>
                </RadzenCard>
            </SummaryTemplate>
        </RadzenPanel>
    }
}

@code{
    [Parameter]
    public string Id { get; set; } = string.Empty;
    private IEnumerable<Grupo>? Grupos;
    private string textoBusca { get; set; } = string.Empty;
    private IEnumerable<Grupo> GruposBusca => filtraGrupo();
    protected override async Task OnInitializedAsync()
    {
        Grupos = await grupoService.GetGruposAsync(Id);
    }
    private IEnumerable<Grupo> filtraGrupo()
    {
        if (Grupos != null && Grupos.Count() > 0 )
        {
            if (!string.IsNullOrEmpty(textoBusca))
            {
                List<Grupo> GruposFiltrados = new List<Grupo>();
                Grupos.ToList().ForEach(grupo => grupo.Produtos.ToList()
                    .ForEach(produto => 
                    {
                        if (produto.Ds_produto.ToLower().Contains(textoBusca.ToLower()))
                            GruposFiltrados.Add(grupo);
                    }));
                //GruposFiltrados.ForEach(grupos => grupos.Produtos = grupos.Produtos.ToList().Where(prod => prod.Ds_produto.ToLower().Contains(textoBusca.ToLower())));

                return GruposFiltrados;
            }
            else
                return Grupos;
        }
        else return null;
    }
}